
    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Petaura - Order History</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
               body {
            margin: 0;
            font-family: 'Roboto', sans-serif;
            background-color: #f7f7f7;
        }

        /* Header Styling */
        .header {
            background: linear-gradient(90deg, #ffa500, #ff7f50);
            padding: 15px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: fixed;
            width: 100%;
            z-index: 10;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .header .logo {
            font-size: 26px;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
        }

        /* Sidebar Styling */
        .sidebar {
            position: fixed;
            top: 70px; /* Start below the header */
            left: 0;
            width: 250px;
            height: calc(100% - 70px);
            background: linear-gradient(180deg, #ffa500, #ffd27f);
            color: white;
            padding-top: 10px;
            box-shadow: 3px 0 8px rgba(0, 0, 0, 0.2);
        }

        .sidebar a {
            display: flex;
            align-items: center;
            color: black;
            padding: 12px 20px;
            margin: 5px 15px;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .sidebar a:hover,
        .sidebar a.active {
            background: rgba(255, 255, 255, 0.3);
            color: white;
        }

        .sidebar i {
            margin-right: 10px;
            font-size: 18px;
        }

        /* Content Area */
        .content {
            margin-left: 270px;
            padding: 20px;
            padding-top: 100px; /* Push content down to not overlap with the fixed header */
        }

        
  /*  */
  
    body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
  color: #fff;
}

.order-container {
  width: 80%;
  margin: 2rem auto;
  background: #ffa500;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

h1, h3 {
  text-align: center;
}

.receipt-details {
  text-align: center;
  margin-bottom: 1.5rem;
}

.receipt-details span {
  color: #ddd;
}

.product-details {
  display: flex;
  align-items: center;
  gap: 1.5rem;
  padding: 1rem;
  border: 1px solid #f5f5f5;
  border-radius: 8px;
  margin-bottom: 1.5rem;
}

.product-details img {
  width: 100px;
  border-radius: 8px;
}

.product-info {
  flex: 1;
}

.product-info h2 {
  margin: 0;
  font-size: 1.5rem;
}

.product-info p {
  margin: 0.5rem 0;
  font-size: 1rem;
}

.actions {
  text-align: center;
  margin: 1rem 0;
}

.btn-disabled {
  background: #6d6868;
  color: #070606;
  border: none;
  padding: 0.5rem 1rem;
  margin: 0 0.5rem;
  border-radius: 4px;
  cursor: not-allowed;
}

.order-summary {
  text-align: left;
}

.order-summary p, .order-summary h4 {
  font-size: 1rem;
  margin: 0.5rem 0;
}

.order-summary span {
  color: #ddd;
}

.cost-details p {
  display: flex;
  justify-content: space-between;
}

.cancel-btn {
  display: block;
  width: 100%;
  padding: 0.8rem;
  background: #ff4d4d;
  border: none;
  color: #fff;
  border-radius: 8px;
  cursor: pointer;
  margin-top: 1rem;
}

.cancel-btn:hover {
  background: #e64545;
}
        
svg {
    color: #000000; /* Blue color */
    cursor: pointer; /* Pointer cursor for interactivity */
    transition: color 0.3s;
    width: 30px;
  }

  svg:hover {
    color: #ffffff; /* Darker blue on hover */
  }
  

/* 
.product-actions {
  display: flex;
  align-items: center;
  justify-content: center;
} */

.product-actions button {
  padding: 8px 15px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
}

.btn-danger {
  background-color: #ffffff;
  color: #000000;
}

.btn-warning {
  background-color: #ffffff;
  color: #000;
}

    </style>
</head>

<body>

    <div class="header">
        <div class="logo">Petaura</div>
        <div class="d-flex end-0">
            <a href="/user" class="home-link" style="text-decoration: none;">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="48" height="48">
                    <path d="M12 3l7 6v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V9l7-6zm5 7.586V19h-3v-4H10v4H7v-8.414L12 5.414l5 5.172z" />
                </svg>
                
            </a>
        </div>
            </div>

    <div class="sidebar d-flex flex-column col-md-3 gap-2">
        <a href="/user/profile" class="">
            <i class="fas fa-user"></i> Account Details
        </a>
        <a href="/user/orderHistory" class="active">
            <i class="fas fa-clock"></i> Order History
        </a>
        <a href="#">
            <i class="fas fa-wallet"></i> Wallet
        </a>
        <a href="/user/cart">
            <i class="fas fa-shopping-cart"></i> Shopping Cart
        </a>
        <a href="#">
            <i class="fas fa-heart"></i> Wishlist
        </a>
        <a href="/user/address">
            <i class="fas fa-map-marker-alt"></i> Address
        </a>
        <a href="/user/referral">
            <i class="fas fa-user-friends"></i> Referral
        </a>
        <a href="/user/logOut">
            <i class="fas fa-sign-out-alt"></i> Log-out
        </a>
    </div>

    <div class="content">
  <div class="order-container">
    <h1>Thanks for your Order, <%= user.name %>!</h1>
    <div class="receipt-details">
      <h3>Receipt</h3>
      <p>Receipt Voucher: <span><%=order.orderId%></span> </p>
      <% if(order.status === 'delivered') { %>
        <p onclick="getInvoice(event, '<%= order.orderId %>')" style="font-weight: bold; text-decoration: none; color: white; cursor: pointer;">Invoice</p> 
    <% } %>
    
    </div>
    <% order.orderedItems.forEach((item) => { %>
      <div class="product-details">
        <img src="<%= item.image %>" alt="<%= item.name %>">
        <div class="product-info">
          <h2><%= item.name %></h2>
          <p>Quantity: <span><%= item.quantity %></span></p>
          <p>Price: ₹<%= item.price %></p>
          <p>Status: <%= item.status %></p>
        </div>
        <div class="product-actions">
          <% if (item.status === "pending") { %>
            <button class="btn btn-danger" onclick="SingleorderCancel(event,'<%= item._id %>','<%= order.orderId %>')">Cancel</button>
          <% } else if (item.status === "delivered" && order.returnDeadline &&  new Date(order.returnDeadline) > new Date()) { %>
            <button class="btn btn-warning" onclick="returnOrderRequest(event,'<%= item._id %>','<%= order.orderId %>')">Return</button>
          <% } %>
        </div>
      </div>
    <% }) %>
    
    

    <div class="order-summary">
      <h3>Order Details</h3>
      <p>Payment Method: <span><%= order.paymentMethod %></span></p>
      <p>Address: <span>
        <%= `${order.address[0].name}, ${order.address[0].state}, ${order.address[0].country}, ${order.address[0].pincode}, Phone: ${order.address[0].phone}` %>
    </span></p>
    
          <div class="cost-details">
        <p>Delivery Charges: ₹<%= order.deliveryFee %></p>
        <p>Coupen Discount: ₹ <%= order.discount %></p>
        <p>Total: ₹<%= order.finalPrice %></p>
      </div>
    </div>
  </div>

</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

function getInvoice(e, orderId) {
  e.preventDefault();
  console.log("ID:", orderId);

  fetch(`/user/getInvoice/${orderId}`, {
    method: "GET",
    headers: {
      'Content-Type': 'application/json'
    },
  })
    .then(response => response.blob())
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'invoice.pdf';
        document.body.appendChild(a);
        a.click();
        a.remove();
    })
    .catch(err => console.error('Error fetching PDF:', err));

    // .then((res) => res.json())
    // .then((res) => {
    //   if (res.success) {
    //     Swal.fire({
    //       icon: "success",
    //       title: "Downloading",
    //       timer: 1200,
    //       showCancelButton: false,
    //       showConfirmButton: false,
    //     });
    //   } else {
    //     Swal.fire({
    //       icon: "error",
    //       title: "Failed to Download",
    //       timer: 1200,
    //       showCancelButton: false,
    //       showConfirmButton: false,
    //     });
    //   }
    // })
    // .catch((err) => {
    //   Swal.fire({
    //     icon: "error",
    //     title: "Error in getInvoice",
    //     text:err.message,
    //     timer:1500,
    //     showCancelButton: false,
    //     showConfirmButton: false,
    //   });
    // });
}

  
function SingleorderCancel(event,itemId,orderId) {
    event.preventDefault(); // Prevent default form behavior

    Swal.fire({
        icon: "warning",
        title: "Are you sure?",
        text: "You want to cancel this order?",
        showCancelButton: true,
        confirmButtonText: "Yes, cancel it",
        cancelButtonText: "No",
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            fetch("/user/single-order-cancel", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({itemId,orderId})
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Order Canceled Successfully",
                        text: data.message,
                        timer: 1500,
                        showConfirmButton: false
                    });
                    location.reload(); // Reload page to refresh the order list
                } else {
                    throw new Error(data.message || "Something went wrong. Please try again.");
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: "error",
                    title: "Order Cancellation Failed",
                    text: error.message,
                    timer: 1500,
                    showConfirmButton: false
                });
            });
        }
    }).catch(error => {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong. Please try again!",
            timer: 1500,
            showConfirmButton: false
        });
    });
}
    

function returnOrderRequest(event,itemId,orderId) {
    event.preventDefault(); // Prevent default form behavior

    Swal.fire({
        icon: "warning",
        title: "Are you sure?",
        text: "You want to request a return for this order?",
        showCancelButton: true,
        confirmButtonText: "Yes, return it",
        cancelButtonText: "No",
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire({
                title: 'Reason for Return',
                input: 'text',
                inputLabel: 'Please enter the reason for the return',
                inputPlaceholder: 'Enter reason here...',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                preConfirm: (reason) => {
                    return fetch("/user/order-return-request", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({itemId, orderId,reason})
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.message || "Something went wrong. Please try again.");
                        }
                        Swal.fire({
                            icon: "success",
                            title: "Return request sent",
                            text: data.message,
                            timer: 1500,
                            showConfirmButton: false
                        });
                        location.reload(); // Reload page to refresh the order list
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: "error",
                            title: "Order return failed",
                            text: error.message,
                            timer: 1500,
                            showConfirmButton: false
                        });
                    });
                }
            });
        }
    }).catch(error => {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong. Please try again!",
            timer: 1500,
            showConfirmButton: false,
        });
    });
}

</script>
</body>

</html>
